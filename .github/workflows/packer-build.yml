name: Packer image build
# on:
#   pull_request_target:
#     types:
#       - closed

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  packer_image_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # Setps to be executed
    steps:
    
    - name: Indicate start of flow
      run: |
        echo The PR was merged

    
    # Run the integration test
    # ============================

    - name: Starting integration test
      run: |
        echo Starting integration test

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.2.0'

    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get -y install postgresql postgresql-contrib
        sudo systemctl start postgresql

    - name: Configure PostgreSQL
      run: |
        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB_INTEGRATION }};"
        sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER_INTEGRATION }} WITH ENCRYPTED PASSWORD '${{ secrets.POSTGRES_PASSWORD_INTEGRATION }}';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.POSTGRES_DB_INTEGRATION }} TO ${{ secrets.POSTGRES_USER_INTEGRATION }};"

    - name: Create .env.integration file
      run: |
        echo "${{ secrets.ENV_FILE_INTEGRATION }}" | base64 -d > .env.integration

    - name: Install dependencies
      run: npm install

    - name: Generate TSOA
      run: npm run generate-tsoa

    - name: Run integration tests
      run: NODE_OPTIONS="--max-old-space-size=1536" npm run integration -- --verbose    

    - name: Integration test END
      run: |
        echo Integration test completed successfully

    # Building the application artifact
    # ============================
      
    # Runs the TypeScript compiler to generate build files
    - name: Compile built files
      run: npm run compile

    # Archiving the build artifact
    - name: Archive built files
      run: tar -czvf dist.tar.gz dist/src/* package*
      # This creates an archive of the dist folder named dist.tar.gz

    - name: Upload built files as artifact
      uses: actions/upload-artifact@v2
      with:
        name: built-files-dist-folder
        path: dist.tar.gz

    
    # Start packer building process
    - name: Starting packer build process
      run: |
        echo Starting packer build process
        
    # Downloading dist.tar.gz to the packer/imageBuilding folder in the pipeline
    - name: Download built files artifact
      uses: actions/download-artifact@v2
      with:
        name: built-files-dist-folder
        path: ./packer/imageBuilding/.

    # Start the image building process
    # ============================

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"   

    - name: Initialize Packer
      run: packer init .
      working-directory: ./packer/imageBuilding

    - name: Decode Variable File
      run: |
        echo "${{ secrets.PACKER_VAR_FILE_BASE64 }}" | base64 --decode > variables.auto.pkvars.hcl       
      working-directory: ./packer/imageBuilding

    - name: Setup Environment Variable
      run: echo "PKR_VAR_image_name=web-app-image-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV  
      working-directory: ./packer/imageBuilding

    - name: Print Image Name
      run: echo $PKR_VAR_image_name
      working-directory: ./packer/imageBuilding

    - name: Inject gcloud service account credentials 
      run: |
        echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > service-account-key.json       
      working-directory: ./packer/imageBuilding

    - name: Setup GCloud Credentials file name as github env variable
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json" >> $GITHUB_ENV  
      working-directory: ./packer/imageBuilding    

    - name: Build Image
      run: packer build -force -var-file=./variables.auto.pkvars.hcl . 2>&1 | sudo tee output.txt
      working-directory: ./packer/imageBuilding

    - name: Get Packer Image Name
      run: |
        IMAGE_NAME=$(tail -1 output.txt | awk -F ': ' '{print $NF}')
        echo $IMAGE_NAME > image_name.txt
      working-directory: ./packer/imageBuilding

    - name: Upload Image Name as Artifact for next workflow_run
      uses: actions/upload-artifact@v2
      with:
        name: image-name-artifact
        path: image_name.txt  
        working-directory: ./packer/imageBuilding 
