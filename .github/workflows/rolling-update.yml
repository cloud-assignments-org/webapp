name: Rolling Update
on:
  workflow_run:
    workflows: [packer_image_build]
    types:
      - completed

# on:
#   pull_request:
#     types: [opened, synchronize]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Authorize GCP
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: ${{ secrets.GCP_CLOUD_USER_SA }}    

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: ">= 363.0.0"
        project_id: ${{ secrets.GCP_CLOUD_USER_SA.project_id }}

    - name: Install jq
      run:  sudo apt-get install jq    

    - name: Download Image Name from artifact
      uses: actions/download-artifact@v2
      with:
        name: image-name-artifact
          
    - name: Set Image Name To Github Variable
      run: |
        cat image_name.txt
        IMAGE_NAME=$(cat image_name.txt)
        echo "The string value is: $IMAGE_NAME"
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

        
    - name: Set environment variables from JSON secret TEMPLATE_VARS_TF
      env:
        TEMPLATE_VARS_TF: ${{ secrets.TEMPLATE_VARS_TF }}
      run: |
        echo "$TEMPLATE_VARS_TF" | jq -r 'to_entries|map("echo \(.key)=\(.value) >> $GITHUB_ENV")|.[]' | bash
  

    - name: Generating env variables
      run: |

        echo Accessing DB Host and Password from google cloud secrets
        
        DB_HOST=$(gcloud secrets versions access latest --secret=SQL_DB_HOST)
        echo "DB_HOST=${DB_HOST}" >> $GITHUB_ENV
        DB_PASSWORD=$(gcloud secrets versions access latest --secret=SQL_DB_PASSWORD)
        echo "DB_PASSWORD=${DB_PASSWORD}" >> $GITHUB_ENV

        echo Generating Unique Template Name
        echo "UNIQUE_TEMPLATE_NAME=${{ env.TEMPLATE_NAME }}-$(date +%s)" >> $GITHUB_ENV

    - name: Create a new Instance Template
      id: create-instance-template
      run: |
        gcloud compute instance-templates create ${{ env.UNIQUE_TEMPLATE_NAME }} \
        --instance-template-region="${{ env.REGION }}" \
        --machine-type="${{ env.MACHINE_TYPE }}" \
        --image="${{ env.IMAGE_NAME }}" \
        --boot-disk-device-name="${{ env.DISK_NAME }}" \
        --boot-disk-size="${{ env.DISK_SIZE_GB }}GB" \
        --boot-disk-type="${{ env.DISK_TYPE }}" \
        --metadata=startup-script="#!/bin/bash
          touch ${{ env.CONFIG_FILE }}
          : > ${{ env.CONFIG_FILE }}
          cat > ${{ env.CONFIG_FILE }} <<-INNER_EOF
          PORT=\"${{ env.APP_PORT }}\"
          # DATABASE
          DB_TYPE=\"${{ env.DB_TYPE }}\"
          DB_HOST=\"${{ env.DB_HOST }}\"
          DB_PORT=${{ env.DB_PORT }}
          DB_USERNAME=\"${{ env.DB_USERNAME }}\"
          DB_PASSWORD=\"${{ env.DB_PASSWORD }}\"
          DB_NAME=\"${{ env.DB_NAME }}\"
          # Pub/Sub
          USER_CREATED_TOPC=\"${{ env.TOPIC_NAME }}\"
          EMAIL_VALIDITY_MINUTES=\"${{ env.VALIDITY_MINUTES }}\"" \
        --network-tier="${{ env.NETWORK_TIER }}" \
        --maintenance-policy="${{ env.MAINTENANCE_POLICY }}" \
        --provisioning-model="${{ env.PROVISIONING_MODEL }}" \
        --network="https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_ID }}/global/networks/${{ env.VPC }}" \
        --subnet="https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/subnetworks/${{ env.SUBNET }}" \
        --tags="${{ env.TAGS }}" \
        --service-account="${{ env.COMPUTE_INSTANCE_SERVICE_ACCOUNT }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
        --scopes="${{ env.COMPUTE_INSTANCE_SERVICE_ACCOUNT_SCOPES }}"

        gcloud compute instance-templates describe "${{ env.UNIQUE_TEMPLATE_NAME }}" \
        --region="${{ env.REGION }}"

    # - name: Update Managed Instance Group with new template
    #   id: update-mig
    #   run: |
    #     gcloud compute instance-groups managed set-instance-template \
    #     ${{ env.MIG_NAME }} \
    #     --template=projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.UNIQUE_TEMPLATE_NAME }} \
    #     --region=${{ env.REGION }}  

    # - name: Trigger Rolling Update
    #   id: rolling-update-trigger
    #   run: |
    #     gcloud compute instance-groups managed rolling-action start-update \
    #     ${{ env.MIG_NAME }} \
    #     --version='template=projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.UNIQUE_TEMPLATE_NAME }}' \
    #     --region=${{ env.REGION }} --max-surge=${{ env.MAX_ROLLING_UPDATE_SURGE }}

    # - name: Wait for Rolling Update to completed
    #   id: wait-for-version-target-reached
    #   run: |
    #     gcloud compute instance-groups managed wait-until ${{ env.MIG_NAME }} --version-target-reached --region=${{ env.REGION }}
