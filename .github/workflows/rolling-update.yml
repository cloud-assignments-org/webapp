name: Rolling Update
# on:
#   workflow_run:
#     workflows: [packer_image_build]
#     types:
#       - completed

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Authorize GCP
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: ${{ secrets.GCP_CLOUD_USER_SA }}    

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: ">= 363.0.0"
        project_id: ${{ secrets.GCP_CLOUD_USER_SA.project_id }}

    - name: Generating env variables
      run: |
        echo "UNIQUE_TEMPLATE_NAME=webapp-template-$(date +%s)" >> $GITHUB_ENV 
        echo "REGION=us-east1" >> $GITHUB_ENV       
        echo "MIG_NAME=l7-xlb-backend-example" >> $GITHUB_ENV 
        echo "MAX_ROLLING_UPDATE_SURGE=3" >> $GITHUB_ENV
        echo "PROJECT_ID=cloud-dev-project-417513" >> $GITHUB_ENV   
        echo "TAGS=load-balanced-backend" >> $GITHUB_ENV  
        echo "SUBNET=webapp" >>  $GITHUB_ENV
        echo "VPC=vpc-1" >>  $GITHUB_ENV
        echo "MACHINE_TYPE=e2-medium" >> $GITHUB_ENV
        echo "IMAGE_NAME=web-app-image-20240327185559" >> $GITHUB_ENV
        echo "DISK_NAME=persistent-disk-0" >> $GITHUB_ENV
        echo "DISK_SIZE=100GB" >> $GITHUB_ENV
        echo "DISK_TYPE=pd-standard" >> $GITHUB_ENV
        echo "CONFIG_FILE=/opt/webapp/.env.production" >> $GITHUB_ENV
        echo "APP_PORT=3000" >> $GITHUB_ENV
        echo "DB_TYPE=postgres" >> $GITHUB_ENV
        echo "DB_HOST=10.31.0.2" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DB_USERNAME=webapp" >> $GITHUB_ENV
        echo "DB_PASSWORD=NELuXPfauDfi2QT6" >> $GITHUB_ENV
        echo "DB_NAME=webapp" >> $GITHUB_ENV
        echo "TOPIC_NAME=user-created" >> $GITHUB_ENV
        echo "VALIDITY_MINUTES=1" >> $GITHUB_ENV
        echo "NETWORK_TIER=STANDARD" >> $GITHUB_ENV
        echo "MAINTENANCE_POLICY=MIGRATE" >> $GITHUB_ENV
        echo "PROVISIONING_MODEL=STANDARD" >> $GITHUB_ENV
        echo "COMPUTE_INSTANCE_SERVICE_ACCOUNT=compute-service-account" >> $GITHUB_ENV
        echo "COMPUTE_INSTANCE_SERVICE_ACCOUNT_SCOPES=cloud-platform" >> $GITHUB_ENV

    - name: Create a new Instance Template
      id: create-instance-template
      run: |
        gcloud compute instance-templates create ${{ env.UNIQUE_TEMPLATE_NAME }} \
        --instance-template-region="${{ env.REGION }}" \
        --machine-type="${{ env.MACHINE_TYPE }}" \
        --image="${{ env.IMAGE_NAME }}" \
        --boot-disk-device-name="${{ env.DISK_NAME }}" \
        --boot-disk-size="${{ env.DISK_SIZE }}" \
        --boot-disk-type="${{ env.DISK_TYPE }}" \
        --metadata=startup-script="#!/bin/bash
          touch ${{ env.CONFIG_FILE }}
          : > ${{ env.CONFIG_FILE }}
          cat > ${{ env.CONFIG_FILE }} <<-INNER_EOF
          PORT=\"${{ env.APP_PORT }}\"
          # DATABASE
          DB_TYPE=\"${{ env.DB_TYPE }}\"
          DB_HOST=\"${{ env.DB_HOST }}\"
          DB_PORT=${{ env.DB_PORT }}
          DB_USERNAME=\"${{ env.DB_USERNAME }}\"
          DB_PASSWORD=\"${{ env.DB_PASSWORD }}\"
          DB_NAME=\"${{ env.DB_NAME }}\"
          # Pub/Sub
          USER_CREATED_TOPC=\"${{ env.TOPIC_NAME }}\"
          EMAIL_VALIDITY_MINUTES=\"${{ env.VALIDITY_MINUTES }}\"" \
        --network-tier="${{ env.NETWORK_TIER }}" \
        --maintenance-policy="${{ env.MAINTENANCE_POLICY }}" \
        --provisioning-model="${{ env.PROVISIONING_MODEL }}" \
        --network="https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_ID }}/global/networks/${{ env.VPC }}" \
        --subnet="https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/subnetworks/${{ env.SUBNET }}" \
        --tags="${{ env.TAGS }}" \
        --service-account="${{ env.COMPUTE_INSTANCE_SERVICE_ACCOUNT }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
        --scopes="${{ env.COMPUTE_INSTANCE_SERVICE_ACCOUNT_SCOPES }}"

    - name: Update Managed Instance Group with new template
      id: update-mig
      run: |
        gcloud compute instance-groups managed set-instance-template \
        ${{ env.MIG_NAME }} \
        --template=projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.UNIQUE_TEMPLATE_NAME }} \
        --region=${{ env.REGION }}  

    - name: Trigger Rolling Update
      id: rolling-update-trigger
      run: |
        gcloud compute instance-groups managed rolling-action start-update \
        ${{ env.MIG_NAME }} \
        --version='template=projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.UNIQUE_TEMPLATE_NAME }}' \
        --region=${{ env.REGION }} --max-surge=${{ env.MAX_ROLLING_UPDATE_SURGE }}

    - name: Wait for Rolling Update to completed
      id: wait-for-version-target-reached
      run: |
        gcloud compute instance-groups managed wait-until ${{ env.MIG_NAME }} --version-target-reached --region=${{ env.REGION }}
